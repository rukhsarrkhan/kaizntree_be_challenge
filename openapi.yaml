openapi: 3.0.0
info:
  title: Dashboard API
  version: "1.0"
  description: API documentation for DashboardApp.
paths:
  /items/:
    get:
      summary: Retrieve a list of all items
      description: Retrieve a list of all items, with optional filtering by stock status, category, and tags.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: stock_status
          schema:
            type: string
          required: false
          description: Filter items by stock status.
        - in: query
          name: category
          schema:
            type: integer
          required: false
          description: Filter items by category ID.
        - in: query
          name: tags
          schema:
            type: string
          required: false
          description: Filter items by comma-separated tag IDs.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Specify the page of results to retrieve.
      responses:
        '200':
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of items across all pages.
                  next:
                    type: string
                    format: uri
                    nullable: true
                    description: URI to the next page of items, if available.
                  previous:
                    type: string
                    format: uri
                    nullable: true
                    description: URI to the previous page of items, if available.
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
    post:
      summary: Create a new item
      description: Create a new item.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Successfully created.
        '400':
          description: Invalid data provided.
  
  /items/{id}/:
    get:
      summary: Retrieve a specific item by ID
      description: Retrieve a specific item by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved.
        '404':
          description: No item found with the specified ID.
    put:
      summary: Update an existing item by ID
      description: Update an existing item by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Successfully updated.
        '400':
          description: Invalid data provided.
        '404':
          description: No item found with the specified ID.
    delete:
      summary: Delete an item by ID
      description: Delete an item by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted.
        '404':
          description: No item found with the specified ID.
  
  /categories/:
    get:
      summary: Retrieve a list of all categories
      description: Retrieve a list of all categories.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      description: Create a new category.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Successfully created.
        '400':
          description: Invalid data provided.
  
  /categories/{id}/:
    get:
      summary: Retrieve a specific category by ID
      description: Retrieve a specific category by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved.
        '404':
          description: No category found with the specified ID.
    delete:
      summary: Delete a category by ID
      description: Delete a category by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted.
        '404':
          description: No category found with the specified ID.

  /tags/:
    get:
      summary: Retrieve a list of all tags
      description: Retrieve a list of all tags.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      summary: Create a new tag
      description: Create a new tag.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Successfully created.
        '400':
          description: Invalid data provided.

  /tags/{id}/:
    get:
      summary: Retrieve a specific tag by ID
      description: Retrieve a specific tag by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved.
        '404':
          description: No tag found with the specified ID.
    delete:
      summary: Delete a tag by ID
      description: Delete a tag by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted.
        '404':
          description: No tag found with the specified ID.

  /api/v1/auth/register/:
    post:
      summary: Register a new user
      description: Register a new user with an email and password.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                password2:
                  type: string
                  format: password
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Invalid data provided.

  /api/v1/auth/login/:
    post:
      summary: Login a user
      description: Login a user using their email and password.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '401':
          description: Invalid credentials or email not verified.

  /api/v1/auth/password-reset/:
    post:
      summary: Request password reset
      description: Sends a password reset link to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset link sent successfully.
        '400':
          description: Error sending password reset link.

  /api/v1/auth/password-reset-confirm/{uidb64}/{token}/:
    get:
      summary: Confirm password reset
      description: Confirms the password reset using the token sent to the user's email.
      parameters:
        - in: path
          name: uidb64
          required: true
          schema:
            type: string
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password reset successfully.
        '400':
          description: Invalid token or password reset failed.

  /api/v1/auth/set-new-password/:
    patch:
      summary: Set new password
      description: Sets a new password for the user.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - new_password
                - confirm_password
                - uidb64
                - token
              properties:
                new_password:
                  type: string
                  format: password
                  description: The new password for the user.
                confirm_password:
                  type: string
                  format: password
                  description: Confirmation of the new password.
                uidb64:
                  type: string
                  description: The base64 encoded ID of the user.
                token:
                  type: string
                  description: The password reset token sent to the user.
      responses:
        '200':
          description: New password set successfully.
        '400':
          description: Error setting new password.

  /api/v1/auth/logout/:
    post:
      summary: Logout a user
      description: Logs out the current user by blacklisting their refresh token.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '204':
          description: User logged out successfully.
        '400':
          description: Error logging out the user.

components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
        sku:
          type: string
        name:
          type: string
        stock_status:
          type: number
        available_stock:
          type: number
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Unique email address for the user.
        is_superuser:
          type: boolean
          default: false
          description: Designates that this user has all permissions without explicitly assigning them.
        is_staff:
          type: boolean
          default: false
          description: Designates whether the user can log into the admin site.
        is_active:
          type: boolean
          default: true
          description: Designates whether this user account should be considered active.
        date_joined:
          type: string
          format: date-time
          description: The date and time when the account was created.
        last_login:
          type: string
          format: date-time
          description: The date and time of the last login.
        tokens:
          type: object
          properties:
            refresh:
              type: string
              description: A refresh token for generating new access tokens.
            access:
              type: string
              description: An access token for authentication.
      required:
        - email
        - is_active
      example:
        email: user@example.com
        is_superuser: false
        is_staff: false
        is_active: true
        date_joined: '2024-02-11T17:29:27Z'
        last_login: '2024-02-12T12:34:56Z'
        tokens:
          refresh: "example_refresh_token"
          access: "example_access_token"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT